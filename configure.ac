# Copyright (C) 2014 Cryptotronix, LLC.

AC_INIT([yacl], [0.3.7], [bugs@cryptotronix.com], [yacl],
        [https://github.com/cryptotronix/yacl])
AC_PREREQ([2.59])
AC_USE_SYSTEM_EXTENSIONS
AM_INIT_AUTOMAKE([1.10 -Wall no-define])
AC_CONFIG_MACRO_DIR([m4])
PKG_PROG_PKG_CONFIG
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])

# Generate two configuration headers; one for building the library itself with
# an autogenerated template, and a second one that will be installed alongside
# the library.
AC_CONFIG_HEADERS([config.h])
AC_PROG_CC
AC_PROG_CC_C_O
AM_PROG_CC_C_O
AM_PROG_AR
LT_INIT([static])
AC_PROG_MKDIR_P

# Define these substitions here to keep all version information in one place.
# For information on how to properly maintain the library version information,
# refer to the libtool manual, section "Updating library version information":
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
AC_SUBST([YACL_SO_VERSION], [5:0:0])
AC_SUBST([YACL_API_VERSION], [0.4])

# uECC settings
AC_DEFINE([uECC_CURVE], [uECC_secp256r1], [Use secp256r1 P-256])
AC_DEFINE([uECC_ASM], [uECC_asm_fast], [Optimize for speed])

AC_ARG_ENABLE(opt,
[AS_HELP_STRING(--enable-opt,Optimize for the native CPU - The resulting library will be faster but not portable)],
[
AS_IF([test "x$enableval" = "xyes"], [
CFLAGS="$CFLAGS -O3 -march=native"
LDFLAGS="$LDFLAGS -O3 -march=native"])
])

PKG_PROG_PKG_CONFIG

#LIBGLIB for unit tests
PKG_CHECK_MODULES([LIBGLIB], [glib-2.0])

AC_ARG_WITH([guile],
        AS_HELP_STRING([--with-guile], [Build the guile extensions]))
AM_CONDITIONAL([HAVE_GUILE], [test "x$with_guile" = "xyes"])

AC_ARG_WITH([libsodium],
        AS_HELP_STRING([--with-libsodium], [Link against libsodium]))
AM_CONDITIONAL([HAVE_LIBSODIUM], [test "x$with_libsodium" = "xyes"])

AS_IF([test "x$with_libsodium" = "xyes"], [
            AC_DEFINE([HAVE_LIBSODIUM], [1], [Linking against libsodium])
            PKG_CHECK_MODULES([LIBSODIUM], [libsodium])
            AC_CHECK_LIB([sodium], [sodium_increment],
                         [AC_DEFINE([HAVE_SODIUM_INCREMENT], [1], [Have sodium_increment])],
                         [])

            AC_CHECK_LIB([sodium], [sodium_compare],
                         [AC_DEFINE([HAVE_SODIUM_COMPARE], [1], [Have sodium_compare])],
                         [])

            AC_CHECK_LIB([sodium], [sodium_is_zero],
                       [AC_DEFINE([HAVE_SODIUM_IS_ZERO], [1], [Have sodium_is_zero])],
                       [])

            AC_CHECK_LIB([sodium], [sodium_add],
                         [AC_DEFINE([HAVE_SODIUM_ADD], [1], [Have sodium_add])],
                         [])

])

AS_IF([test "x$with_guile" = "xyes"], [
# Guile Extensions
PKG_CHECK_MODULES([GUILE], [guile-2.0])
GUILE_PROGS
GUILE_FLAGS
GUILE_SITE_DIR
])

AC_ARG_ENABLE([arm-asm],
        AS_HELP_STRING([--enable-arm-asm], [Build with arm asm]))
AM_CONDITIONAL([WANT_ARM], [test "x$enable_arm_asm" = "xyes"])

AS_IF([test "x$enable_arm_asm" = "xyes"], [
AC_DEFINE([WANT_ARM_ASM], [1], [Use arm asm])
])

dnl Checks

AC_PROG_CC_C99
AM_PROG_AS
AC_USE_SYSTEM_EXTENSIONS

AC_CHECK_DEFINE([__native_client__], [NATIVECLIENT="yes"], [])

AC_CHECK_DEFINE([_FORTIFY_SOURCE], [], [
  AX_CHECK_COMPILE_FLAG([-D_FORTIFY_SOURCE=2],
    [CPPFLAGS="$CPPFLAGS -D_FORTIFY_SOURCE=2"])
])

AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],
  [CFLAGS="$CFLAGS -fvisibility=hidden"])

AS_CASE([$host_os], [cygwin*|mingw*|msys|pw32*|cegcc*], [ ], [
  AX_CHECK_COMPILE_FLAG([-fPIC], [
    AX_CHECK_LINK_FLAG([-fPIC],
      [CFLAGS="$CFLAGS -fPIC"]
    )
  ])
])

AS_IF([test "$enable_pie" != "no"],[
  AX_CHECK_COMPILE_FLAG([-fPIE], [
    AX_CHECK_LINK_FLAG([-fPIE],
      [AX_CHECK_LINK_FLAG([-pie],
        [CFLAGS="$CFLAGS -fPIE"
         LDFLAGS="$LDFLAGS -pie"])
    ])
  ])
])

AX_CHECK_COMPILE_FLAG([-fno-strict-aliasing], [CFLAGS="$CFLAGS -fno-strict-aliasing"])
AX_CHECK_COMPILE_FLAG([-fno-strict-overflow], [CFLAGS="$CFLAGS -fno-strict-overflow"], [
  AX_CHECK_COMPILE_FLAG([-fwrapv], [CFLAGS="$CFLAGS -fwrapv"])
])

AS_IF([test "$GCC" = "yes" ], [
  AS_CASE([$host_cpu],
    [i?86|amd64|x86_64], [
      AC_COMPILE_IFELSE(
        [AC_LANG_SOURCE([
#if !defined(__clang__) && defined(__GNUC__) && ((__GNUC__ << 8) | __GNUC_MINOR__) < 0x403
# error old gcc
#endif
int main(void) { return 0; }
         ])],,[
          AX_CHECK_COMPILE_FLAG([-flax-vector-conversions], [CFLAGS="$CFLAGS -flax-vector-conversions"])
        ])
      ]
    )
  ])

LIBTOOL_OLD_FLAGS="$LIBTOOL_EXTRA_FLAGS"
LIBTOOL_EXTRA_FLAGS="$LIBTOOL_EXTRA_FLAGS -version-info $SODIUM_LIBRARY_VERSION"
AC_ARG_ENABLE(soname-versions,
  [AC_HELP_STRING([--enable-soname-versions], [enable soname versions (must be disabled for Android) (default: enabled)])],
    [
        AS_IF([test "x$enableval" = "xno"], [
          LIBTOOL_EXTRA_FLAGS="$LIBTOOL_OLD_FLAGS -avoid-version"
        ])
    ]
)

AS_CASE([$host_os],
  [cygwin*|mingw*|msys|pw32*|cegcc*], [
    AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [LDFLAGS="$LDFLAGS -Wl,--dynamicbase"])
    AX_CHECK_LINK_FLAG([-Wl,--high-entropy-va], [LDFLAGS="$LDFLAGS -Wl,--high-entropy-va"])
    AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [LDFLAGS="$LDFLAGS -Wl,--nxcompat"])
  ])

AS_IF([test "x$enable_ssp" != "xno"],[

AS_CASE([$host_os],
  [cygwin*|mingw*|msys|pw32*|cegcc*], [ ],
  [*], [
    AX_CHECK_COMPILE_FLAG([-fstack-protector], [
      AX_CHECK_LINK_FLAG([-fstack-protector],
        [CFLAGS="$CFLAGS -fstack-protector"]
      )
    ])
  ])
])

AX_CHECK_COMPILE_FLAG([-Wwrite-strings], [CFLAGS="$CFLAGS -Wwrite-strings"])
AX_CHECK_COMPILE_FLAG([-Wdiv-by-zero], [CFLAGS="$CFLAGS -Wdiv-by-zero"])
AX_CHECK_COMPILE_FLAG([-Wsometimes-uninitialized], [CFLAGS="$CFLAGS -Wsometimes-uninitialized"])

AC_ARG_VAR([CWFLAGS], [define to compilation flags for generating extra warnings])

AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wall], [CWFLAGS="$CWFLAGS -Wall"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wextra], [CWFLAGS="$CWFLAGS -Wextra"])

AC_MSG_CHECKING(for clang)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
#ifndef __clang__
be sad
#endif
]])],
  [AC_MSG_RESULT(yes)
   AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wno-unknown-warning-option],
     [CWFLAGS="$CWFLAGS -Wno-unknown-warning-option"])
  ],
  [AC_MSG_RESULT(no)
])

AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wbad-function-cast], [CWFLAGS="$CWFLAGS -Wbad-function-cast"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wcast-align], [CWFLAGS="$CWFLAGS -Wcast-align"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wcast-qual], [CWFLAGS="$CWFLAGS -Wcast-qual"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wduplicated-cond], [CWFLAGS="$CWFLAGS -Wduplicated-cond"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wfloat-equal], [CWFLAGS="$CWFLAGS -Wfloat-equal"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wformat=2], [CWFLAGS="$CWFLAGS -Wformat=2"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wmissing-declarations], [CWFLAGS="$CWFLAGS -Wmissing-declarations"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wmissing-prototypes], [CWFLAGS="$CWFLAGS -Wmissing-prototypes"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wnested-externs], [CWFLAGS="$CWFLAGS -Wnested-externs"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wno-unknown-pragmas], [CWFLAGS="$CWFLAGS -Wno-unknown-pragmas"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wnormalized=id], [CWFLAGS="$CWFLAGS -Wnormalized=id"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wnull-dereference], [CWFLAGS="$CWFLAGS -Wnull-dereference"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wpointer-arith], [CWFLAGS="$CWFLAGS -Wpointer-arith"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wredundant-decls], [CWFLAGS="$CWFLAGS -Wredundant-decls"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wstrict-prototypes], [CWFLAGS="$CWFLAGS -Wstrict-prototypes"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wswitch-enum], [CWFLAGS="$CWFLAGS -Wswitch-enum"])
AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wvariable-decl], [CWFLAGS="$CWFLAGS -Wvariable-decl"])

AX_CHECK_LINK_FLAG([-Wl,-z,relro], [LDFLAGS="$LDFLAGS -Wl,-z,relro"])
AX_CHECK_LINK_FLAG([-Wl,-z,now], [LDFLAGS="$LDFLAGS -Wl,-z,now"])
AX_CHECK_LINK_FLAG([-Wl,-z,noexecstack], [LDFLAGS="$LDFLAGS -Wl,-z,noexecstack"])

LT_INIT
AC_SUBST(LIBTOOL_DEPS)

AC_ARG_VAR([AR], [path to the ar utility])
AC_CHECK_TOOL([AR], [ar], [ar])


# Override the template file name of the generated .pc file, so that there
# is no need to rename the template file when the API version changes.
AC_CONFIG_FILES([Makefile test/Makefile yacl.pc:yacl.pc.in])

AC_OUTPUT


echo "
     $PACKAGE_NAME version $PACKAGE_VERSION
     Prefix..........: $prefix
     C Compiler......: $CC $CFLAGS $CPPFLAGS
     C++ Compiler....: $CXX $CXXFLAGS $CPPFLAGS
     Linker..........: $LD $LDFLAGS $LIBS
     Sys conf dir....: $sysconfdir
     Local state dir.: $localstatedir
     Pkg libexec dir.: $pkglibexecdir
     Guile extensions: $with_guile
"
